#!/usr/bin/env python3
"""
Sistema de extracci√≥n h√≠brido que combina:
1. Extracci√≥n por patrones regex mejorados
2. Sistema LLM del bot Miramar
3. Detecci√≥n de direcciones con libpostal

Esto resuelve el problema de que el LLM no extrae datos.
"""

import json
import sys
import os

# Agregar el directorio al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from extraer_datos_directo import extraer_datos_mensaje_mejorado

def extraer_datos_hibrido(mensaje_usuario: str, usar_llm: bool = True):
    """
    Extracci√≥n h√≠brida que combina patrones regex + LLM.
    """
    print(f"üîß EXTRACCI√ìN H√çBRIDA - Input: {mensaje_usuario}")
    print("=" * 60)
    
    # 1. Extracci√≥n con patrones mejorados (siempre funciona)
    print("1Ô∏è‚É£ EXTRACCI√ìN POR PATRONES:")
    datos_patrones = extraer_datos_mensaje_mejorado(mensaje_usuario)
    print(f"   Resultado patrones: {json.dumps(datos_patrones, ensure_ascii=False)}")
    
    datos_final = datos_patrones.copy()
    
    # 2. Extracci√≥n con LLM (si est√° disponible y habilitado)
    if usar_llm:
        try:
            print("\n2Ô∏è‚É£ EXTRACCI√ìN POR LLM:")
            from miramar_bot.vendedor import MiramarSellerBot
            from miramar_bot.cargar_modelo import load_model_and_tokenizer
            
            model, tokenizer, device = load_model_and_tokenizer("lora_4bit")
            bot = MiramarSellerBot(model, tokenizer, device)
            
            datos_llm = bot.validate_input_llm(mensaje_usuario)
            print(f"   Resultado LLM: {json.dumps(datos_llm, ensure_ascii=False)}")
            
            # 3. Fusionar resultados (LLM complementa patrones)
            print("\n3Ô∏è‚É£ FUSI√ìN DE RESULTADOS:")
            for key, value in datos_llm.items():
                if value and (not datos_final.get(key) or len(str(value)) > len(str(datos_final.get(key, '')))):
                    datos_final[key] = value
                    print(f"   ‚úÖ {key}: '{value}' (desde LLM)")
                elif datos_final.get(key):
                    print(f"   üîÑ {key}: '{datos_final[key]}' (desde patrones)")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Error con LLM: {e}")
            print("   ‚û°Ô∏è Usando solo extracci√≥n por patrones")
    
    # 4. Resultado final
    print(f"\n4Ô∏è‚É£ RESULTADO FINAL:")
    print(f"   {json.dumps(datos_final, ensure_ascii=False, indent=2)}")
    
    # 5. Verificar extracci√≥n exitosa
    campos_criticos = ['origen', 'destino', 'fecha', 'hora', 'cantidad_personas']
    extraidos = sum(1 for campo in campos_criticos if datos_final.get(campo))
    
    print(f"\nüìä AN√ÅLISIS: {extraidos}/{len(campos_criticos)} campos cr√≠ticos extra√≠dos")
    if extraidos >= 2:
        print("‚úÖ EXTRACCI√ìN EXITOSA")
    else:
        print("‚ùå EXTRACCI√ìN INSUFICIENTE")
    
    return datos_final


def probar_caso_critico():
    """Prueba el caso cr√≠tico espec√≠fico del usuario."""
    print("üéØ PRUEBA CASO CR√çTICO:")
    print("=" * 60)
    
    caso_critico = "Necesito cotizar desde Av Curauma Sur 1826 hasta Valpara√≠so el 10/10 a las 2pm, somos 3 personas"
    
    resultado = extraer_datos_hibrido(caso_critico)
    
    # Verificar campos esperados
    esperados = {
        'origen': 'Av Curauma Sur 1826',
        'destino': 'Valpara√≠so', 
        'fecha': '2025-10-10',
        'hora': '2pm',
        'cantidad_personas': '3'
    }
    
    print(f"\nüîç VERIFICACI√ìN DE CAMPOS ESPERADOS:")
    for campo, esperado in esperados.items():
        extraido = resultado.get(campo, '')
        if extraido:
            print(f"‚úÖ {campo}: '{extraido}' (esperado: '{esperado}')")
        else:
            print(f"‚ùå {campo}: NO EXTRA√çDO (esperado: '{esperado}')")


def probar_multiples_casos():
    """Prueba m√∫ltiples casos para verificar robustez."""
    casos = [
        "Desde Av Curauma Sur 1826 hasta Valpara√≠so el 10/10 a las 2pm, somos 3 personas",
        "De vi√±a del mar a santiago, ma√±ana a las 8am, somos 5",
        "Quiero ir desde aeropuerto hasta av libertad 1234, para el 15 de octubre",
        "Viaje de Santiago a Valpara√≠so",
        "El 27 de junio a las 3pm, somos 4 personas sin regreso",
        "Somos 3 personas, vamos ma√±ana",
        "¬øCu√°nto cuesta ir a Valpara√≠so?"
    ]
    
    print("\nüß™ PRUEBAS M√öLTIPLES:")
    print("=" * 60)
    
    for i, caso in enumerate(casos, 1):
        print(f"\n--- CASO {i} ---")
        resultado = extraer_datos_hibrido(caso, usar_llm=False)  # Solo patrones para rapidez
        
        # Resumen
        campos_extraidos = [k for k, v in resultado.items() if v]
        print(f"üìã Resumen: {len(campos_extraidos)} campos ‚Üí {', '.join(campos_extraidos)}")


if __name__ == "__main__":
    if len(sys.argv) > 1:
        # Caso espec√≠fico
        mensaje = " ".join(sys.argv[1:])
        extraer_datos_hibrido(mensaje)
    else:
        # Ejecutar pruebas
        probar_caso_critico()
        probar_multiples_casos()
